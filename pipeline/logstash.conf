
input {
#    tcp {
#        port => 5000
#        type => "docker"#
#        codec => plain {
#            charset => "UTF-8"
#            charset => "ISO-8859-1"
#        }
#    }
    beats {
        port => "${LOGSTASH_PORT}"
#        ssl => true
#        ssl_certificate => "/etc/pki/tls/certs/logstash-beats.crt"
#        ssl_key => "/etc/pki/tls/private/logstash-beats.key"
    }
}

## Add your filters / logstash plugins configuration here

filter {
    if [type] == "nginx-access" {
        grok {
            match => { "message" => "%{NGINXACCESS}" }
        }

        date {
            match => [ "time", "dd/MMM/YYYY:HH:mm:ss Z" ]
            locale => en
            target => "@timestamp"
        }
        geoip {
            source => "clientip"
            target => "geoip"
            add_field => [ "[geoip][coordinates]", "%{[geoip][longitude]}" ]
            add_field => [ "[geoip][coordinates]", "%{[geoip][latitude]}"  ]
        }
        mutate {
            convert => {
                "[geoip][coordinates]" => "float"
            }
        }
    }
    if [type] == "nginx-error" {
        grok {
            match => { "message" => "%{NGINXERROR}" }
        }
        date {
            match => [ "date_time", "YYYY/MM/dd HH:mm:ss" ]
            locale => en
            target => "@timestamp"
        }
        geoip {
            source => "clientip"
            target => "geoip"
            add_field => [ "[geoip][coordinates]", "%{[geoip][longitude]}" ]
            add_field => [ "[geoip][coordinates]", "%{[geoip][latitude]}"  ]
        }
        mutate {
            convert => [ "[geoip][coordinates]", "float"]
        }
    }
    if [type] == "mysql-error" {
        grok {
            match => [ "message", "%{MYSQLLOG}" ]
        }
        date {
            match => [ "date_time", "YYYY-MM-dd HH:mm:ss" ]
            locale => en
            target => "@timestamp"
        }
    }
	if [type] == "app-json" {
        date {
            match => [ "date_time", "YYYY-MM-dd HH:mm:ss" ]
            locale => en
            target => "@timestamp"
        }
	}
}

output {
    elasticsearch {
        hosts => "${ELASTIC_HOST}:${ELASTIC_PORT}"
        sniffing => true
        manage_template => true
        template => "/usr/share/logstash/templates/nginx-template.json"
        template_name => "nginx-*"
        template_overwrite => true
        index => "%{[@metadata][beat]}-%{+YYYY.MM.dd}"
        document_type => "%{[@metadata][type]}"
    }
    stdout { codec => rubydebug }
}
